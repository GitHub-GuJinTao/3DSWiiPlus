C51 COMPILER V9.52.0.0   MODULEANALOGCALIBRATION                                           08/08/2017 16:17:41 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE MODULEANALOGCALIBRATION
OBJECT MODULE PLACED IN ModuleAnalogCalibration.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ModuleAnalogCalibration.c OPTIMIZE(9,SPEED) REGFILE(.\3DSWiiPlus.ORC) BROWS
                    -E DEFINE(LCM_DRIVER_IST3932) DEBUG OBJECTEXTEND

line level    source

   1          #include <STRING.H>
   2          #include "ModuleAnalogCalibration.h"
   3          #include "main.h"
   4          #include "LCM12864.h"
   5          #include "SaveData.h"
   6          #include "PWM.h"
   7          #include "Controller.h"
   8          
   9          
  10          static void Init(){
  11   1              SaveData_Read();
  12   1              
  13   1              if(1){
  14   2                      u8 len = LCM12864_GetStrLenFromIdx(10, TITLE_ANALOG_CALIBRATION) - 1;
  15   2                      LCM12864_FillRect(((128 - len) >> 1) - 1, 0, len + 2, 11, 1);
  16   2                      LCM12864_DrawStringIdx(10, TITLE_ANALOG_CALIBRATION, (128 - len) >> 1, 1, 0);
  17   2                      LCM12864_DrawStringIdx(10, CALIBRATION_THRESTHOLD, 0, 12, 1);
  18   2                      LCM12864_DrawStringIdx(10, CALIBRATION_OFFSET, 64, 12, 1);
  19   2              }
  20   1      }
  21          
  22          void ModuleAnalogCalibration(){
  23   1              s16 offset = 128 << 4;  // ∂®µ„ ˝
  24   1              s8 selectedItem = 0;
  25   1              
  26   1              Init();
  27   1              
  28   1              PWM_SetChannelStatus(0x0F);
  29   1              PWM_Start();
  30   1              
  31   1              while(1){
  32   2                      s16 tlx = 0, tly = 0, trx = 0, try = 0;
  33   2                      if(1){
  34   3                              s16 len = LCM12864_GetStrLenFromIdx(10, DESC_4) - 1;
  35   3                              u8 strRatio[6];
  36   3                              u8 strOffset[6];
  37   3                              Hex2String(saveData.analogRatioL, strRatio + 0);
  38   3                              strRatio[2] = ',';
  39   3                              Hex2String(saveData.analogRatioR, strRatio + 3);
  40   3                              Hex2String(saveData.analogOffsetL, strOffset + 0);
  41   3                              strOffset[2] = ',';
  42   3                              Hex2String(saveData.analogOffsetR, strOffset + 3);
  43   3                              
  44   3                              LCM12864_FillRect(25, 12, 15, 10, 0);
  45   3                              LCM12864_DrawString(10, strRatio, 25, 12, 1);
  46   3                              
  47   3                              LCM12864_FillRect(99, 12, 15, 10, 0);
  48   3                              LCM12864_DrawString(10, strOffset, 99, 12, 1);
  49   3                              
  50   3                              LCM12864_FillRect(0, 22, 128, 10, 0);
  51   3                              LCM12864_DrawStringIdx(10, DESC_4, offset >> 4, 22, 1); // L/R—°‘Ò…Ë∂®µƒ“°∏À …œ/œ¬µ˜’˚„–÷µ ◊Û/”“µ˜’˚∆´“
             -∆¡ø A±£¥Ê…Ë∂®≤¢∑µªÿ…Ë÷√≤Àµ• B≤ª±£¥Ê…Ë∂®÷±Ω”∑µªÿ…Ë÷√≤Àµ•
  52   3      
  53   3                              offset -= 8;
C51 COMPILER V9.52.0.0   MODULEANALOGCALIBRATION                                           08/08/2017 16:17:41 PAGE 2   

  54   3                              if(offset < -(len << 4))offset = 128 << 4;
  55   3                      }
  56   2                      LCM12864_Refresh();
  57   2                      
  58   2                      Controller_Read();
  59   2                      
  60   2                      if(Controller_IsKeyHold(WII_CLASSIC_CONTROLLER_BUTTON_UP)){
  61   3                              if(Controller_IsKeyHold(WII_CLASSIC_CONTROLLER_BUTTON_L)){
  62   4                                      saveData.analogRatioL--;
  63   4                                      saveData.analogRatioL &= 0x80;
  64   4                              }
  65   3                              if(Controller_IsKeyHold(WII_CLASSIC_CONTROLLER_BUTTON_R)){
  66   4                                      saveData.analogRatioR--;
  67   4                                      saveData.analogRatioR &= 0x80;
  68   4                              }
  69   3                      }
  70   2                      if(Controller_IsKeyHold(WII_CLASSIC_CONTROLLER_BUTTON_DOWN)){
  71   3                              if(Controller_IsKeyHold(WII_CLASSIC_CONTROLLER_BUTTON_L)){
  72   4                                      saveData.analogRatioL++;
  73   4                                      saveData.analogRatioL &= 0x80;
  74   4                              }
  75   3                              if(Controller_IsKeyHold(WII_CLASSIC_CONTROLLER_BUTTON_R)){
  76   4                                      saveData.analogRatioR++;
  77   4                                      saveData.analogRatioR &= 0x80;
  78   4                              }
  79   3                      }
  80   2                      if(Controller_IsKeyHold(WII_CLASSIC_CONTROLLER_BUTTON_LEFT)){
  81   3                              if(Controller_IsKeyHold(WII_CLASSIC_CONTROLLER_BUTTON_L)){
  82   4                                      saveData.analogOffsetL--;
  83   4                                      saveData.analogOffsetL &= 0x80;
  84   4                              }
  85   3                              if(Controller_IsKeyHold(WII_CLASSIC_CONTROLLER_BUTTON_R)){
  86   4                                      saveData.analogOffsetR--;
  87   4                                      saveData.analogOffsetR &= 0x80;
  88   4                              }
  89   3                      }
  90   2                      if(Controller_IsKeyHold(WII_CLASSIC_CONTROLLER_BUTTON_RIGHT)){
  91   3                              if(Controller_IsKeyHold(WII_CLASSIC_CONTROLLER_BUTTON_L)){
  92   4                                      saveData.analogOffsetL++;
  93   4                                      saveData.analogOffsetL &= 0x80;
  94   4                              }
  95   3                              if(Controller_IsKeyHold(WII_CLASSIC_CONTROLLER_BUTTON_R)){
  96   4                                      saveData.analogOffsetR++;
  97   4                                      saveData.analogOffsetR &= 0x80;
  98   4                              }
  99   3                      }
 100   2                      if(Controller_IsKeyDown(WII_CLASSIC_CONTROLLER_BUTTON_A)){
 101   3                              SaveData_Flush();
 102   3                              
 103   3                              currentModule = Module_ConfigMenu;
 104   3                              PWM_Stop();
 105   3                              return;
 106   3                      }
 107   2                      if(Controller_IsKeyDown(WII_CLASSIC_CONTROLLER_BUTTON_B)){
 108   3                              currentModule = Module_ConfigMenu;
 109   3                              PWM_Stop();
 110   3                              return;
 111   3                      }
 112   2                      
 113   2                      if(saveData.analogMapping){
 114   3                              trx = Controller_GetLAnalogX();
 115   3                              try = Controller_GetLAnalogY();
C51 COMPILER V9.52.0.0   MODULEANALOGCALIBRATION                                           08/08/2017 16:17:41 PAGE 3   

 116   3                              tlx = Controller_GetRAnalogX();
 117   3                              tly = Controller_GetRAnalogY();
 118   3                      }else{
 119   3                              tlx = Controller_GetLAnalogX();
 120   3                              tly = Controller_GetLAnalogY();
 121   3                              trx = Controller_GetRAnalogX();
 122   3                              try = Controller_GetRAnalogY();
 123   3                      }
 124   2                      if(saveData.reverseAnalogX){
 125   3                              tlx = -tlx;
 126   3                              trx = -trx;
 127   3                      }
 128   2                      if(saveData.reverseAnalogY){
 129   3                              tly = -tly;
 130   3                              try = -try;
 131   3                      }
 132   2                      tlx *= saveData.analogRatioL;
 133   2                      tlx >>= 6;
 134   2                      tlx += saveData.analogOffsetL;
 135   2                      tly *= saveData.analogRatioL;
 136   2                      tly >>= 6;
 137   2                      tly += saveData.analogOffsetL;
 138   2                      if(tlx < 0)tlx = 0;
 139   2                      if(tlx > 0xFF)tlx = 0xFF;
 140   2                      if(tly < 0)tly = 0;
 141   2                      if(tly > 0xFF)tly = 0xFF;
 142   2                      trx *= saveData.analogRatioR;
 143   2                      trx >>= 6;
 144   2                      trx += saveData.analogOffsetR;
 145   2                      try *= saveData.analogRatioR;
 146   2                      try >>= 6;
 147   2                      try += saveData.analogOffsetR;
 148   2                      if(trx < 0)trx = 0;
 149   2                      if(trx > 0xFF)trx = 0xFF;
 150   2                      if(try < 0)try = 0;
 151   2                      if(try > 0xFF)try = 0xFF;
 152   2                      PWM_SetDuty(0, tlx);
 153   2                      PWM_SetDuty(1, tly);
 154   2                      PWM_SetDuty(2, trx);
 155   2                      PWM_SetDuty(3, try);
 156   2              }
 157   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1081    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      26
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
