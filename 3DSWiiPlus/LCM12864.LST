C51 COMPILER V9.52.0.0   LCM12864                                                          08/08/2017 16:17:41 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE LCM12864
OBJECT MODULE PLACED IN LCM12864.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE LCM12864.c OPTIMIZE(9,SPEED) REGFILE(.\3DSWiiPlus.ORC) BROWSE DEFINE(LCM_DR
                    -IVER_IST3932) DEBUG OBJECTEXTEND

line level    source

   1          #include <STRING.H>
   2          #include "LCM12864.h"
   3          #if defined LCM_DRIVER_UC1701X
              #include "UC1701X.h"
              #elif defined LCM_DRIVER_IST3932
   6          #include "IST3932.h"
   7          #elif defined LCM_DRIVER_SSD1306
              #include "SSD1306.h"
              #endif
  10          #include "SPI.h"
  11          #include "FontText.h"
  12          
  13          
  14          #ifndef ABS
  15          #define ABS(a)  ((a) > 0 ? (a) : -(a))
  16          #endif
  17          
  18          
  19          #ifdef USE_12832
              u8 xdata VRAM[512];             // 12832的显存为512字节
              #else
  22          u8 xdata VRAM[1024];    // 12864的显存为1K字节
  23          #endif
  24          u16 xdata tmpBuf[0x10]; // 16*2的字模缓冲区
  25          
  26          
  27          void LCM12864_SendCommand(u8 value){
  28   1              LCM12864_CS = 0;
  29   1              LCM12864_CD = 0;
  30   1              SPI_SendAndReceive(value);
  31   1      }
  32          
  33          void LCM12864_SendData(u8 value){
  34   1              LCM12864_CS = 0;
  35   1              LCM12864_CD = 1;
  36   1              SPI_SendAndReceive(value);
  37   1      }
  38          
  39          void LCM12864_Init(){
  40   1              P1M0 &= 0xF8;
  41   1              P1M1 &= 0xF8;   // 设置/CS、CD和LED为准双向
  42   1              
  43   1      #if defined LCM_DRIVER_UC1701X
                      UC1701X_Init();
              #elif defined LCM_DRIVER_IST3932
  46   1              IST3932_Init();
  47   1      #elif defined LCM_DRIVER_SSD1306
                      SSD1306_Init();
              #endif
  50   1      }
  51          
  52          void LCM12864_Clear(){
  53   1              memset(VRAM, 0, sizeof(VRAM));
  54   1      }
C51 COMPILER V9.52.0.0   LCM12864                                                          08/08/2017 16:17:41 PAGE 2   

  55          
  56          void LCM12864_Refresh(){
  57   1      #if defined LCM_DRIVER_UC1701X
                      UC1701X_Refresh();
              #elif defined LCM_DRIVER_IST3932
  60   1              IST3932_Refresh();
  61   1      #elif defined LCM_DRIVER_SSD1306
                      SSD1306_Refresh();
              #endif
  64   1      }
  65          
  66          /*
  67          打开/关闭背光
  68          */
  69          void LCM12864_Backlight(bit isOn){
  70   1              LCM12864_LED = isOn;
  71   1      }
  72          
  73          // 仅供双字节字符使用。单字节字符可以直接计算出idx
  74          static u16 LCM12864_GetIdxFromASCII(u16 ascii){
  75   1              u16 i;
  76   1              for(i=0;i<CHARACTER_COUNT;++i){
  77   2                      if(fontIdx[i] == ascii)
  78   2                              break;
  79   2              }
  80   1              return i + 0x60;
  81   1      }
  82          
  83          void LCM12864_DrawChar(u8 fontSize, u16 idx, s8 x, s8 y, bit c){
  84   1              memcpy(tmpBuf, fontText + idx * sizeof(u16) * fontSize, sizeof(u16) * fontSize);
  85   1      #if defined LCM_DRIVER_UC1701X
                      UC1701X_DrawChar(fontSize, x, y, c);
              #elif defined LCM_DRIVER_IST3932
  88   1              IST3932_DrawChar(fontSize, x, y, c);
  89   1      #elif defined LCM_DRIVER_SSD1306
                      SSD1366_DrawChar(fontSize, x, y, c);
              #endif
  92   1      }
  93          
  94          void LCM12864_DrawString(u8 fontSize, const char* str, s16 x, s16 y, bit c){
  95   1              u8 i = 0;
  96   1              while(1){
  97   2                      u16 chr = (u16)str[i];
  98   2                      if(chr == 0){
  99   3                              return;
 100   3                      }else if(chr < 0x80){
 101   3                              i++;
 102   3                              if(x >= -fontSize && x <= 127)
 103   3                                      LCM12864_DrawChar(fontSize, chr - 0x20, x, y, c);
 104   3                              x += (fontSize >> 1);
 105   3                      }else{
 106   3                              chr <<= 8;
 107   3                              i++;
 108   3                              chr |= str[i];
 109   3                              i++;
 110   3                              if(x >= -fontSize && x <= 127)
 111   3                                      LCM12864_DrawChar(fontSize, LCM12864_GetIdxFromASCII(chr), x, y, c);
 112   3                              x += fontSize;
 113   3                      }
 114   2              }
 115   1      }
 116          
C51 COMPILER V9.52.0.0   LCM12864                                                          08/08/2017 16:17:41 PAGE 3   

 117          void LCM12864_DrawStringIdx(u8 fontSize, u8 idx, s16 x, s16 y, bit c){
 118   1              u8 i = 0;
 119   1              u16* str = strings[idx];
 120   1              while(str[i] != 0xFFFF){
 121   2                      u16 _idx = str[i];
 122   2                      i++;
 123   2                      if(x >= -fontSize && x <= 127)
 124   2                              LCM12864_DrawChar(fontSize, _idx, x, y, c);
 125   2                      // 索引值小于0x60的，都是单字节字符，宽度为一半
 126   2                      if(_idx < 0x60){
 127   3                              x += (fontSize >> 1);
 128   3                      }else{
 129   3                              x += fontSize;
 130   3                      }
 131   2              }
 132   1      }
 133          
 134          /*
 135          在缓冲区任意位置画点
 136          */
 137          void LCM12864_DrawPixel(u8 x, u8 y, bit c){
 138   1      #if defined LCM_DRIVER_UC1701X
                      UC1701X_DrawPixel(x, y, c);
              #elif defined LCM_DRIVER_IST3932
 141   1              IST3932_DrawPixel(x, y, c);
 142   1      #elif defined LCM_DRIVER_SSD1306
                      SSD1306_DrawPixel(x, y, c);
              #endif
 145   1      }
 146          
 147          /*
 148          在缓冲区任意位置画直线
 149          */
 150          void LCM12864_DrawLine(u8 x0, u8 y0, u8 x1, u8 y1, bit c){
 151   1              s8 dx = x1 - x0;
 152   1              s8 dy = y1 - y0;
 153   1              s8 ux = ((dx > 0) << 1) - 1;    // x的增量方向，正负1
 154   1              s8 uy = ((dy > 0) << 1) - 1;    // y的增量方向，正负1
 155   1              s8 x = x0, y = y0, eps = 0;             // eps为累加误差
 156   1      
 157   1              dx = ABS(dx);
 158   1              dy = ABS(dy); 
 159   1              if(dx > dy){
 160   2                      for(;x!=x1;x+=ux){
 161   3                              LCM12864_DrawPixel(x, y, c);
 162   3                              eps += dy;
 163   3                              if((eps << 1) >= dx){
 164   4                                      y += uy;
 165   4                                      eps -= dx;
 166   4                              }
 167   3                      }
 168   2              }else{
 169   2                      for(;y!=y1;y+=uy){
 170   3                              LCM12864_DrawPixel(x, y, c);
 171   3                              eps += dx;
 172   3                              if((eps << 1) >= dy){
 173   4                                      x += ux;
 174   4                                      eps -= dy;
 175   4                              }
 176   3                      }
 177   2              }
 178   1      }
C51 COMPILER V9.52.0.0   LCM12864                                                          08/08/2017 16:17:41 PAGE 4   

 179          
 180          /*
 181          在缓冲区任意位置填充矩形
 182          */
 183          void LCM12864_FillRect(u8 x, u8 y, u8 w, u8 h, bit c){
 184   1      #if defined LCM_DRIVER_UC1701X
                      UC1701X_FillRect(x, y, w, h, c);
              #elif defined LCM_DRIVER_IST3932
 187   1              IST3932_FillRect(x, y, w, h, c);
 188   1      #elif defined LCM_DRIVER_SSD1306
                      SSD1306_FillRect(x, y, w, h, c);
              #endif
 191   1      }
 192          
 193          /*
 194          在缓冲区任意位置画圆
 195          */
 196          void LCM12864_DrawCircle(u8 x1, u8 y1, u8 r, bit c){
 197   1              s16 x = 0, y = r;
 198   1              s8 d = 1 - r;
 199   1              while(y > x){
 200   2                      LCM12864_DrawPixel(x1 + x, y1 + y, c);
 201   2                      LCM12864_DrawPixel(x1 + y, y1 + x, c);
 202   2                      LCM12864_DrawPixel(x1 - x, y1 + y, c);
 203   2                      LCM12864_DrawPixel(x1 - y, y1 + x, c);
 204   2                      LCM12864_DrawPixel(x1 - x, y1 - y, c);
 205   2                      LCM12864_DrawPixel(x1 - y, y1 - x, c);
 206   2                      LCM12864_DrawPixel(x1 + x, y1 - y, c);
 207   2                      LCM12864_DrawPixel(x1 + y, y1 - x, c);
 208   2                      if(d < 0){
 209   3                              d += 2 * x + 3;
 210   3                      }else{
 211   3                              d += 2 * (x - y) + 5;
 212   3                              y--;
 213   3                      }
 214   2                      x++;
 215   2              }
 216   1      }
 217          
 218          /*
 219          从索引获得字符串长度
 220          */
 221          u16 LCM12864_GetStrLenFromIdx(u8 fontSize, u8 idx){
 222   1              u16 ret = 0;
 223   1              u16* str = strings[idx];
 224   1              u16 i = 0;
 225   1              while(1){
 226   2                      u16 cidx = str[i++];
 227   2                      if(cidx == 0xFFFF)
 228   2                              break;
 229   2                      else if(cidx < 0x60)
 230   2                              ret += (fontSize >> 1);
 231   2                      else
 232   2                              ret += fontSize;
 233   2              }
 234   1              return ret;
 235   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1056    ----
   CONSTANT SIZE    =   5732    ----
C51 COMPILER V9.52.0.0   LCM12864                                                          08/08/2017 16:17:41 PAGE 5   

   XDATA SIZE       =   1056    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      51
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       8
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
